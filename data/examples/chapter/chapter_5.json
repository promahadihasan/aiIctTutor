{
  "topics": 
  [
  {
    "id": 1,
    "name": "প্রোগ্রাম",
    "definition": "কোনো নির্দিষ্ট সমস্যা সমাধানের জন্য বা কোনো কাজ সম্পাদনের জন্য কম্পিউটারের বোধগম্য ভাষায় লিখিত ধারাবাহিকভাবে সাজানো একগুচ্ছ নির্দেশমালাকে **প্রোগ্রাম** বলে। এটি হলো কম্পিউটারের জন্য একটি **'রেসিপি'** বা কার্যপ্রণালী। এই নির্দেশগুলোই কম্পিউটারকে বলে দেয় কী করতে হবে এবং কীভাবে করতে হবে।"
  },
  {
    "id": 2,
    "name": "প্রোগ্রামিং ভাষা",
    "definition": "কম্পিউটারের মাধ্যমে কোনো সমস্যা সমাধানের জন্য ব্যবহৃত ভাষা, যার সাহায্যে প্রোগ্রাম রচনা করা হয় এবং যার সাহায্যে কম্পিউটারকে নির্দেশ প্রদান করা যায়। এটি প্রোগ্রামার এবং কম্পিউটারের মধ্যে **যোগাযোগের মাধ্যম**। এটি নির্দিষ্ট নিয়ম এবং সিনট্যাক্স (Syntax) মেনে চলে।"
  },
  {
    "id": 3,
    "name": "মেশিন ভাষা",
    "definition": "কম্পিউটারের নিজস্ব ভাষা, যা কেবল **০ (জিরো) এবং ১ (ওয়ান)** এই দুটি বাইনারি অঙ্ক বা বিট দ্বারা গঠিত। এটি প্রথম প্রজন্মের ভাষা এবং এটিতে সরাসরি প্রোগ্রাম লেখা যায়। এটিই একমাত্র ভাষা যা কম্পিউটার কোনো **অনুবাদক ছাড়াই সরাসরি বুঝতে পারে** এবং কার্যকর করতে পারে। এটি হার্ডওয়্যারের খুব কাছাকাছি ভাষা।"
  },
  {
    "id": 4,
    "name": "মেশিন ভাষা ও অ্যাসেম্বলি ভাষার পার্থক্য",
    "definition": "মেশিন ভাষা হলো সরাসরি বাইনারি কোড (০, ১), যা কম্পিউটার সরাসরি বোঝে। অন্যদিকে অ্যাসেম্বলি ভাষা হলো দ্বিতীয় প্রজন্মের ভাষা, যা বাইনারি কোডের পরিবর্তে **নেমোনিক কোড** (যেমন— ADD, SUB) ব্যবহার করে। প্রধান পার্থক্য হলো: মেশিন ভাষা **বাইনারি**, যা কম্পিউটারের জন্য সহজ। অ্যাসেম্বলি ভাষা **নেমোনিক**, যা মানুষের জন্য কিছুটা সহজবোধ্য কিন্তু কম্পিউটারের জন্য অ্যাসেম্বলার অনুবাদক প্রয়োজন।"
  },
  {
    "id": 5,
    "name": "উচ্চ স্তরের ভাষা",
    "definition": "যেসব প্রোগ্রামিং ভাষা মানুষের স্বাভাবিক ভাষার (যেমন— ইংরেজি) কাছাকাছি এবং যা লিখতে মেশিন কোড বা হার্ডওয়্যার সম্পর্কে বিস্তারিত জানার প্রয়োজন হয় না, সেগুলোকে **উচ্চ স্তরের ভাষা** বলে। যেমন— C, C++, Python, Java। এই ভাষাগুলো প্রোগ্রামারদের জন্য কাজকে অনেক সহজ করে তুলেছে। এগুলো **কম্পিউটারের হার্ডওয়্যার থেকে দূরে** অবস্থান করে (Machine Independent) এবং সহজেই শেখা যায়।"
  },
  {
    "id": 6,
    "name": "4GL (চতুর্থ প্রজন্মের ভাষা)",
    "definition": "চতুর্থ প্রজন্মের প্রোগ্রামিং ভাষা (Fourth Generation Language)। এগুলো উচ্চ স্তরের ভাষার চেয়েও আরো বেশি **ব্যবহারকারী-বান্ধব**। এগুলিতে খুব সহজে ডেটাবেজ অ্যাপ্লিকেশন বা রিপোর্ট তৈরি করা যায়। এগুলো প্রায়ই **Query Language** নামে পরিচিত এবং এগুলো মূলত কম সময়ে দ্রুত অ্যাপ্লিকেশন বা রিপোর্ট তৈরির জন্য ডিজাইন করা হয়েছে। SQL একটি জনপ্রিয় উদাহরণ।"
  },
  {
    "id": 7,
    "name": "5GL (পঞ্চম প্রজন্মের ভাষা)",
    "definition": "পঞ্চম প্রজন্মের প্রোগ্রামিং ভাষা (Fifth Generation Language)। এই ভাষাগুলোতে **কৃত্রিম বুদ্ধিমত্তা (AI)** বা বিশেষজ্ঞ সিস্টেম (Expert System) তৈরির জন্য ব্যবহৃত হয়। এই ভাষাগুলোতে প্রোগ্রামারকে কীভাবে সমাধান করতে হবে তা বলতে হয় না, বরং **কী সমাধান করতে হবে** শুধু সেটি উল্লেখ করা হয়। Prolog হলো এর একটি ক্লাসিক উদাহরণ।"
  },
  {
    "id": 8,
    "name": "অনুবাদক প্রোগ্রাম",
    "definition": "একটি সফটওয়্যার, যা এক প্রকার প্রোগ্রামিং ভাষায় লিখিত সোর্স কোডকে অন্য প্রকার প্রোগ্রামিং ভাষায় (সাধারণত মেশিন ভাষায়) রূপান্তরিত করে, যাতে কম্পিউটার তা কার্যকর করতে পারে। যেহেতু কম্পিউটার শুধু বাইনারি বোঝে, তাই উচ্চ স্তরের ভাষায় লেখা প্রোগ্রামকে **মেশিন ভাষায় রূপান্তর** করার জন্য এটি 'ভাষান্তরে'র কাজ করে।"
  },
  {
    "id": 9,
    "name": "কম্পাইলার ও ইন্টারপ্রেটার",
    "definition": "উভয়েই অনুবাদক প্রোগ্রাম। **কম্পাইলার** পুরো সোর্স কোডটিকে একবারে মেশিন কোডে অনুবাদ করে। অন্যদিকে **ইন্টারপ্রেটার** সোর্স কোডের প্রতিটি লাইন ধাপে ধাপে অনুবাদ ও কার্যকর করে। কম্পাইলার দ্রুত কাজ করে কিন্তু পুরো কোড ঠিক না হওয়া পর্যন্ত চলে না (যেমন— C++), আর ইন্টারপ্রেটার কিছুটা ধীরগতিতে কাজ করে এবং লাইন বাই লাইন ত্রুটি খুঁজে বের করে (যেমন— Python)।"
  },
  {
    "id": 10,
    "name": "অ্যাসেম্বলার (অনুবাদক)",
    "definition": "একটি অনুবাদক প্রোগ্রাম, যা **অ্যাসেম্বলি ভাষায়** লেখা প্রোগ্রামকে সরাসরি মেশিন ভাষায় (বাইনারি কোডে) অনুবাদ করে। এটি অ্যাসেম্বলি ভাষার নেমোনিক কোড (যেমন: MOV, JMP) কে তার সমতুল্য ০ ও ১ এর বাইনারি কোডে রূপান্তর করে।"
  },
  {
    "id": 11,
    "name": "প্রোগ্রাম সংগঠন",
    "definition": "প্রোগ্রাম লেখার জন্য অনুসরণ করা **যৌক্তিক ধাপসমূহকে** প্রোগ্রাম সংগঠন বা প্রোগ্রামিং কাঠামো বলে। এটি অ্যালগরিদম, ফ্লোচার্ট, এবং সোর্স কোড লেখার নিয়মাবলী দ্বারা নির্ধারিত হয়। সঠিক প্রোগ্রাম সংগঠন একটি প্রোগ্রামের **পঠনযোগ্যতা (Readability)**, কার্যকারিতা এবং রক্ষণাবেক্ষণকে সহজ করে তোলে।"
  },
  {
    "id": 12,
    "name": "অ্যালগরিদম",
    "definition": "কোনো নির্দিষ্ট সমস্যা সমাধানের জন্য **সুনির্দিষ্ট ও সীমিত সংখ্যক ধাপে** সমাধান করার পদ্ধতিকে অ্যালগরিদম বলে। এটি প্রোগ্রামিং কোড লেখার আগে ধাপগুলো বর্ণনা করতে সাহায্য করে। এটি হলো কোনো কাজ করার জন্য একটি **পরিকল্পনা বা ছক**। এটি কোড লেখার আগে চিন্তা ও যুক্তির ধাপগুলো স্পষ্ট করে।"
  },
  {
    "id": 13,
    "name": "ফ্লোচার্ট (প্রোগ্রামিং)",
    "definition": "অ্যালগরিদমকে বিভিন্ন **প্রতীক বা চিহ্নের সাহায্যে চিত্রের মাধ্যমে** প্রকাশ করার পদ্ধতিকে ফ্লোচার্ট বলে। এটি প্রোগ্রামের ডেটা প্রবাহ এবং নির্দেশাবলীর ক্রম বুঝতে সাহায্য করে। এটি একটি **ভিজ্যুয়াল টুল**, যা প্রোগ্রামের লজিক বা যুক্তিকে সহজ ও স্পষ্টভাবে উপস্থাপন করে। এটি প্রোগ্রামের গতিপথকে নির্দেশ করে।"
  },
  {
    "id": 14,
    "name": "OOP",
    "definition": "**অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং** (Object-Oriented Programming)। এটি এমন একটি প্রোগ্রামিং পদ্ধতি, যেখানে প্রোগ্রামিং-কে ক্লাস (Class) এবং অবজেক্ট (Object) ধারণার ওপর ভিত্তি করে সংগঠিত করা হয়। এই পদ্ধতির মূল ধারণাগুলো হলো **ইনক্যাপসুলেশন, ইনহেরিট্যান্স, পলিমরফিজম** ইত্যাদি, যা প্রোগ্রামকে আরও নমনীয় (Flexible) এবং মডিউলার (Modular) করে তোলে।"
  },
  {
    "id": 15,
    "name": "ডিবাগিং",
    "definition": "প্রোগ্রামে বিদ্যমান ত্রুটি বা **বাগ (Bug) খুঁজে বের করা** এবং তা সংশোধন করার প্রক্রিয়াকে ডিবাগিং বলে। এটি প্রোগ্রামিং এর একটি অত্যাবশ্যকীয় অংশ। ত্রুটিগুলো সাধারণত তিন প্রকার: **সিনট্যাক্স এরর (Syntax Error), রানটাইম এরর (Runtime Error) এবং লজিক্যাল এরর (Logical Error)**।"
  },
  {
    "id": 16,
    "name": "সি ও সি++ এর পার্থক্য",
    "definition": "**C** হলো একটি পদ্ধতিভিত্তিক (Procedural) প্রোগ্রামিং ভাষা, আর **C++** হলো C-এর সম্প্রসারিত রূপ, যা অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং (OOP) বৈশিষ্ট্য সমর্থন করে। C++ প্রোগ্রামারকে OOP ব্যবহার করে জটিল প্রোগ্রাম তৈরি করার সুযোগ দেয়, যা C-তে নেই। C++-কে C-এর **'Super Set'** বলা যেতে পারে।"
  },
  {
    "id": 17,
    "name": "হেডার ফাইল",
    "definition": "C বা C++ প্রোগ্রামের শুরুতে অন্তর্ভুক্ত করা ফাইল, যাতে আগে থেকে লেখা **লাইব্রেরি ফাংশনগুলোর ঘোষণা (Declaration)** এবং ম্যাক্রো সংজ্ঞায়িত থাকে। যেমন— `<stdio.h>`, `<iostream>`। এই ফাইলগুলো কম্পাইলারকে জানায় যে প্রোগ্রামে ব্যবহৃত ফাংশনগুলো কোথায় খুঁজে পাওয়া যাবে। এদেরকে সাধারণত `#include` ডিরেক্টিভ ব্যবহার করে যুক্ত করা হয়।"
  },
  {
    "id": 18,
    "name": "ডাটা টাইপ",
    "definition": "প্রোগ্রামিং এ চলক বা ভেরিয়েবল **কোন ধরনের ডেটা** (যেমন— পূর্ণসংখ্যা, দশমিক সংখ্যা, অক্ষর ইত্যাদি) ধারণ করবে, তা নির্ধারণ করার জন্য ব্যবহৃত কীওয়ার্ডকে ডেটা টাইপ বলে। ডেটা টাইপ মেমরিতে **কতটুকু জায়গা দরকার** এবং সেই ডেটার উপর কী কী গাণিতিক অপারেশন করা যাবে, তা নির্ধারণ করে দেয়। যেমন: `int`, `float`, `char`।"
  },
  {
    "id": 19,
    "name": "ডাটা টাইপ ঘোষণার (declaration) নিয়ম",
    "definition": "প্রোগ্রামে কোনো চলক ব্যবহার করার আগে তার **নাম এবং ডেটা টাইপ** উল্লেখ করে দেওয়াকে চলক ঘোষণা বলে। সাধারণ নিয়ম হলো: **'DataType VariableName;'**। যেমন: `int age;`। চলক ঘোষণা করার মাধ্যমে কম্পাইলারকে বলে দেওয়া হয় যে প্রোগ্রাম চালানোর সময় এই ডেটার জন্য মেমরিতে একটি জায়গা আলাদা করে রাখতে হবে।"
  },
  {
    "id": 20,
    "name": "ধ্রুবক",
    "definition": "প্রোগ্রাম নির্বাহের সময় যার **মান কখনো পরিবর্তন করা যায় না**, তাকে ধ্রুবক (Constant) বলে। ধ্রুবকের মান প্রোগ্রামের শুরুতেই নির্ধারণ করে দেওয়া হয়। এগুলো নির্দিষ্ট, অপরিবর্তনীয় মান সংরক্ষণের জন্য ব্যবহৃত হয়। C-তে **`const` কীওয়ার্ড** বা `#define` ব্যবহার করে ধ্রুবক ঘোষণা করা যায়। যেমন: `const float PI = 3.1416;`।"
  },
  {
    "id": 21,
    "name": "চলক",
    "definition": "প্রোগ্রাম নির্বাহের সময় ডেটা সংরক্ষণের জন্য ব্যবহৃত মেমরি অবস্থানের একটি নাম বা পাত্র, যার **মান প্রয়োজনে পরিবর্তন করা যায়**। চলককে ইংরেজিতে ভেরিয়েবল (Variable) বলা হয়। একটি চলককে একটি **খালি বাক্সের** মতো ভাবা যেতে পারে, যার মধ্যে আপনি বিভিন্ন ডেটা রাখতে পারেন এবং প্রয়োজনের সময় তা পরিবর্তন করতে পারেন।"
  },
  {
    "id": 22,
    "name": "রিলেশনাল অপারেটর",
    "definition": "যেসব অপারেটর **দুটি রাশির মধ্যে সম্পর্ক (যেমন— সমান, অসমান, বড়, ছোট) স্থাপন বা তুলনা** করতে ব্যবহৃত হয়, সেগুলোকে রিলেশনাল অপারেটর বলে। যেমন— `>`, `<`, `==`। এই অপারেটরগুলো সাধারণত **শর্তসাপেক্ষ (Conditional) স্টেটমেন্টে** ব্যবহার করা হয় এবং এদের ফলাফল সবসময় বুলিয়ান (Boolean) হয়, অর্থাৎ 'সত্য' বা 'মিথ্যা'।"
  },
  {
    "id": 23,
    "name": "কীওয়ার্ড ইন সি",
    "definition": "সি (C) ভাষায় ব্যবহৃত বিশেষ শব্দসমূহ, যার **নির্দিষ্ট অর্থ কম্পাইলারের জন্য সংরক্ষিত** এবং প্রোগ্রামার কর্তৃক অন্য কোনো কাজে (যেমন— চলকের নাম হিসেবে) ব্যবহার করা যায় না। যেমন— `int`, `for`, `if`, `while`। C-তে মোট **৩২টি সংরক্ষিত কীওয়ার্ড** রয়েছে। এই শব্দগুলো কম্পাইলারকে নির্দিষ্ট কাজ করার নির্দেশ দেয়।"
  },
  {
    "id": 24,
    "name": "ফরমেট স্পেসিফাইয়ার",
    "definition": "C বা C++ প্রোগ্রামিং-এ ইনপুট গ্রহণ বা আউটপুট প্রদর্শনের সময় **ডেটার ধরণ নির্দিষ্ট করার জন্য** ব্যবহৃত প্রতীক। এটি `%` চিহ্ন দিয়ে শুরু হয়। যেমন— `%d` (পূর্ণসংখ্যার জন্য), `%f` (দশমিক সংখ্যার জন্য)। `printf()` বা `scanf()` ফাংশনের মতো I/O ফাংশনগুলোতে এই স্পেসিফাইয়ার ব্যবহার করা হয়। এটি কম্পাইলারকে জানায় যে ডেটাটিকে কীভাবে মেমরি থেকে পড়তে হবে বা স্ক্রিনে দেখাতে হবে।"
  },
  {
    "id": 25,
    "name": "কন্ট্রোল স্টেটমেন্ট",
    "definition": "যেসব স্টেটমেন্টের মাধ্যমে **প্রোগ্রামের স্বাভাবিক নির্বাহের ক্রমকে নিয়ন্ত্রণ**, পরিবর্তন বা শর্তসাপেক্ষে পরিচালনা করা যায়, সেগুলোকে কন্ট্রোল স্টেটমেন্ট বলে। এগুলি প্রধানত কন্ডিশনাল এবং লুপিং (Looping) স্টেটমেন্ট। এগুলি প্রোগ্রামের **ফ্লো (Flow)** নির্ধারণ করে—কোন অংশ কখন চলবে এবং কতবার চলবে। `if`, `for`, `while` হলো প্রধান কন্ট্রোল স্টেটমেন্ট।"
  },
  {
    "id": 26,
    "name": "কন্ডিশনাল স্টেটমেন্ট",
    "definition": "প্রোগ্রামের **কোনো শর্তের ওপর ভিত্তি করে** নির্দিষ্ট কোড ব্লক কার্যকর হবে কি না, তা নির্ধারণের জন্য ব্যবহৃত স্টেটমেন্ট। যেমন— `if`, `else if`, `switch`। এটি প্রোগ্রামকে সিদ্ধান্ত নিতে সাহায্য করে। যদি শর্ত **সত্য (True)** হয়, তবে এক সেট নির্দেশ কার্যকর হয়; আর যদি **মিথ্যা (False)** হয়, তবে অন্য সেট নির্দেশ কার্যকর হতে পারে।"
  },
  {
    "id": 27,
    "name": "অ্যারে",
    "definition": "**একই ডেটা টাইপের একাধিক ডেটাকে একটি একক নামে** এবং মেমরিতে পরপর ধারাবাহিকভাবে সংরক্ষণ করার একটি কৌশলকে অ্যারে বলে। একই রকম অনেক ডেটা (যেমন: ৫০ জন শিক্ষার্থীর রোল নম্বর) সংরক্ষণ ও পরিচালনা করার জন্য এটি খুব কার্যকর। অ্যারে-র প্রতিটি উপাদানকে তার **ইনডেক্স (Index)** নম্বর দিয়ে অ্যাক্সেস করা হয়।"
  },
  {
    "id": 28,
    "name": "চলক ও অ্যারে কি এক?",
    "definition": "না, এক নয়। **চলক (Variable)** মেমরিতে শুধুমাত্র **একটি মান** ধারণ করে, যার একটি নির্দিষ্ট নাম আছে। অন্যদিকে **অ্যারে (Array)** হলো একই নামের অধীনে **একই ডেটা টাইপের একাধিক মানকে** সংরক্ষণ করার জন্য ব্যবহৃত একটি সংগ্রহ। চলক হলো একটি একক পাত্র, আর অ্যারে হলো অনেকগুলো একই ধরনের পাত্রের একটি সারি বা গুচ্ছ।"
  },
  {
    "id": 29,
    "name": "লাইব্রেরি ফাংশন",
    "definition": "যেসব ফাংশন প্রোগ্রামের সাধারণ কাজগুলো (যেমন— ইনপুট/আউটপুট, গাণিতিক হিসাব) সহজ করার জন্য **পূর্বেই তৈরি করে সংকলকের (Compiler) লাইব্রেরিতে সংরক্ষণ** করা থাকে এবং প্রোগ্রামার প্রয়োজন অনুযায়ী ব্যবহার করতে পারে। এগুলো হলো রেডিমেড কোড বা সমাধান। প্রোগ্রামারকে প্রথম থেকে ফাংশনটি লিখতে হয় না, শুধু হেডার ফাইলের মাধ্যমে এটিকে **ডেকে ব্যবহার** করতে হয়। যেমন: `sqrt()` বা `printf()`।"
  }
]
}
